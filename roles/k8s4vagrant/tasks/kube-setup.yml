- name: Add Kubernetes YUM repository
  yum_repository:
    name: kubernetes
    description: Kubernetes repository
    baseurl: https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
    gpgcheck: yes
    enabled: yes
    gpgkey: https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key

- name: Install Kubernetes packages
  yum:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: yes

- name: Enable and start kubelet service
  systemd:
    name: kubelet
    enabled: yes
    state: started

- name: Check if lock file exists
  stat:
    path: /tmp/kubeadm.lock
  register: lock_file_stat

- name: Get correct IP address (on the desired NIC)
  shell: ip -o -4 addr show dev eth1 | awk '{print $4}' | cut -d/ -f1
  register: correct_ip
  when: inventory_hostname == "kubemaster"

- name: Initialize Kubernetes with correct network interface
  become: true
  command: kubeadm init --apiserver-advertise-address={{ correct_ip.stdout }} --pod-network-cidr=10.244.0.0/16
  when: inventory_hostname == "kubemaster" and not lock_file_stat.stat.exists
  register: kubeadm_init
  notify: lockfile

- name: Set up kubeconfig for vagrant user
  become: true
  shell: |
    mkdir -p /home/vagrant/.kube
    mkdir -p /root/.kube
    cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
    cp -i /etc/kubernetes/admin.conf /root/.kube/config
    chown vagrant:vagrant /home/vagrant/.kube/config
  when: inventory_hostname == "kubemaster" and not lock_file_stat.stat.exists

- name: Retrieve the join command for worker nodes
  command: kubeadm token create --print-join-command
  when: inventory_hostname == "kubemaster"
  register: join_command

- name: Set join command fact
  set_fact:
    join_command_str: "{{ join_command.stdout }}"
  when: inventory_hostname == "kubemaster" and not lock_file_stat.stat.exists

- name: Join worker nodes to the Kubernetes cluster
  command: "{{ hostvars['kubemaster'].join_command_str }}"
  when: inventory_hostname != "kubemaster" and not lock_file_stat.stat.exists

- name: Ensure containerd CNI configuration exists in config.toml
  lineinfile:
    path: /etc/containerd/config.toml
    regexp: '^\s*\[plugins."io.containerd.grpc.v1.cri".cni\]'
    line: |
      [plugins."io.containerd.grpc.v1.cri".cni]
        bin_dir = "/opt/cni/bin"
        conf_dir = "/etc/cni/net.d"
    state: present

# Install Flannel CNI on all nodes
- name: Install Flannel CNI plugin
  become: true
  command: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
  when: inventory_hostname == "kubemaster" and not lock_file_stat.stat.exists

- name: Restart containerd
  systemd:
    name: containerd
    state: restarted

- name: Restart kubelet
  systemd:
    name: kubelet
    state: restarted
